using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using NSwag.CodeGeneration;

namespace Refitter.Core;

/// <summary>
/// Provide settings for Refit generator.
/// </summary>
[ExcludeFromCodeCoverage]
public class RefitGeneratorSettings
{
    public const string DefaultOutputFolder = "./Generated";
    public const string DefaultNamespace = "GeneratedCode";

    /// <summary>
    /// Gets or sets the path to the Open API.
    /// </summary>
    [Description("The path to the OpenAPI document.")]
    public string OpenApiPath { get; set; } = null!;

    /// <summary>
    /// Gets or sets the namespace for the generated code. (default: GeneratedCode)
    /// </summary>
    [Description("The namespace for the generated code. Default is GeneratedCode.")]
    public string Namespace { get; set; } = DefaultNamespace;

    /// <summary>
    /// Gets or sets the namespace for the generated contracts. (default: GeneratedCode);
    /// </summary>
    [Description("The namespace for the generated contracts. Default is GeneratedCode.")]
    public string? ContractsNamespace { get; set; }

    /// <summary>
    /// Gets or sets the naming settings.
    /// </summary>
    [Description("The naming settings.")]
    public NamingSettings Naming { get; set; } = new();

    /// <summary>
    /// Gets or sets a value indicating whether contracts should be generated.
    /// </summary>
    [Description("Generate contracts. Default is true.")]
    public bool GenerateContracts { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether clients should be generated.
    /// </summary>
    [Description("Generate clients. Default is true.")]
    public bool GenerateClients { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether clients should implement IDisposable.
    /// </summary>
    [Description("Generate clients that implement IDisposable.")]
    public bool GenerateDisposableClients { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether XML doc comments should be generated.
    /// </summary>
    [Description("Generate XML doc comments. Default is true.")]
    public bool GenerateXmlDocCodeComments { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether <c>ApiException</c> and <c>IApiResponse</c> should be documented with
    /// the relevant status codes specified in the OpenAPI document.
    /// </summary>
    [Description(
        """
        Indicating whether <c>ApiException</c> and <c>IApiResponse</c> should be documented with
        the relevant status codes specified in the OpenAPI document.
        """
    )]
    public bool GenerateStatusCodeComments { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether to add auto-generated header.
    /// </summary>
    [Description("Add auto-generated header. Default is true.")]
    public bool AddAutoGeneratedHeader { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether to add accept headers [Headers("Accept: application/json")].
    /// </summary>
    [Description("Add accept headers [Headers(\"Accept: application/json\")]. Default is true.")]
    public bool AddAcceptHeaders { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether to add content-type headers [Headers("Content-Type: application/json")].
    /// </summary>
    [Description("Add content-type headers [Headers(\"Content-Type: application/json\")]. Default is true.")]
    public bool AddContentTypeHeaders { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether to return <c>IApiResponse</c> objects.
    /// </summary>
    [Description("Return IApiResponse objects.")]
    public bool ReturnIApiResponse { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether to return IObservable or Task
    /// </summary>
    [Description("Return IObservable or Task.")]
    public bool ReturnIObservable { get; set; }

    /// <summary>
    /// Gets or sets a dictionary of operation ids and a specific response type that they should use. The type is
    /// wrapped in a task, but otherwise unmodified (so make sure that the namespaces are imported or specified).
    /// </summary>
    [Description(
        """
        AddAcceptHeaders dictionary of operation ids and a specific response type that they should use.
        The type is wrapped in a task, but otherwise unmodified (so make sure that the namespaces are imported or specified).
        """
    )]
    public Dictionary<string, string> ResponseTypeOverride { get; set; } = new();

    /// <summary>
    /// Gets or sets a value indicating whether to generate operation headers.
    /// </summary>
    [Description("Generate operation headers. Default is true.")]
    public bool GenerateOperationHeaders { get; set; } = true;

    /// <summary>
    /// Gets or sets the generated type accessibility. (default: Public)
    /// </summary>
    [Description("The generated type accessibility. Default is Public.")]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public TypeAccessibility TypeAccessibility { get; set; } = TypeAccessibility.Public;

    /// <summary>
    /// Enable or disable the use of cancellation tokens.
    /// </summary>
    [Description("Enable or disable the use of cancellation tokens.")]
    public bool UseCancellationTokens { get; set; }

    /// <summary>
    /// Set to <c>true</c> to explicitly format date query string parameters
    /// in ISO 8601 standard date format using delimiters (for example: 2023-06-15)
    /// </summary>
    [Description(
        """
        Set to true to explicitly format date query string parameters
        in ISO 8601 standard date format using delimiters (for example: 2023-06-15)
        """
    )]
    public bool UseIsoDateFormat { get; set; }

    /// <summary>
    /// Add additional namespace to generated types
    /// </summary>
    [Description("Add additional namespace to generated types.")]
    public string[] AdditionalNamespaces { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Exclude namespaces on generated types
    /// </summary>
    [Description("Exclude namespaces on generated types.")]
    public string[] ExcludeNamespaces { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Set to <c>true</c> to Generate a Refit interface for each endpoint
    /// </summary>
    [Description("Generate a Refit interface for each endpoint.")]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public MultipleInterfaces MultipleInterfaces { get; set; }

    /// <summary>
    /// Set to <c>true<c/> to only include Paths that match the provided regular expression.
    /// May be set multiple times
    /// </summary>
    [Description("Only include Paths that match the provided regular expression. May be set multiple times.")]
    public string[] IncludePathMatches { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Set to <c>true</c> to only include Endpoints that contain this tag.
    /// May be set multiple times and result in OR'ed evaluation.
    /// </summary>
    [Description("Generate a Refit interface for each endpoint.")]
    public string[] IncludeTags { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Set to <c>true</c> to generate deprecated operations, otherwise <c>false</c>
    /// </summary>
    [Description("Generate deprecated operations. Default is true.")]
    public bool GenerateDeprecatedOperations { get; set; } = true;

    /// <summary>
    /// Generate operation names using pattern.
    /// When using <see cref="MultipleInterfaces"/> <see cref="Core.MultipleInterfaces.ByEndpoint"/>, this is name of the Execute() method in the interface.
    /// </summary>
    [Description(
        """
        Generate operation names using pattern. When using --multiple-interfaces ByEndpoint,
        this is name of the Execute() method in the interface.
        """
    )]
    public string? OperationNameTemplate { get; set; }

    /// <summary>
    /// Set to <c>true</c> to re-order optional parameters to the end of the parameter list
    /// </summary>
    [Description("Re-order optional parameters to the end of the parameter list.")]
    public bool OptionalParameters { get; set; }

    /// <summary>
    /// Gets or sets the relative path to a folder in which the output files are generated. (default: ./Generated)
    /// </summary>
    [Description("The relative path to a folder in which the output files are generated. Default is ./Generated.")]
    public string OutputFolder { get; set; } = DefaultOutputFolder;

    /// <summary>
    /// Gets or sets the relative path to a folder where to store the generated contracts. (default: ./Generated)
    /// </summary>
    [Description("The relative path to a folder where to store the generated contracts. Default is ./Generated.")]
    public string? ContractsOutputFolder { get; set; }

    /// <summary>
    /// Gets or sets the filename of the generated code.
    /// For the CLI tool, the default is Output.cs
    /// For the Source Generator, this is the name of the generated class and the default is [.refitter defined naming OR .refitter filename].g.cs)
    /// </summary>
    [Description(
        """
        The filename of the generated code.
        For the CLI tool, the default is Output.cs
        The the Source Generator, this is the name of the generated class
        and the default is [.refitter defined naming OR .refitter filename].g.cs)
        """
    )]
    public string? OutputFilename { get; set; }

    /// <summary>
    /// Gets or sets the settings describing how to register generated interface to the .NET Core DI container
    /// </summary>
    [Description("The settings describing how to register generated interface to the .NET Core DI container.")]
    public DependencyInjectionSettings? DependencyInjectionSettings { get; set; }

    /// <summary>
    /// Gets or sets the settings describing how to generate types using NSwag
    /// </summary>
    [Description("The settings describing how to generate types using NSwag.")]
    public CodeGeneratorSettings? CodeGeneratorSettings { get; set; }

    /// <summary>
    /// Set to <c>true</c> to apply tree-shaking to the OpenApi schema.
    /// This works in conjunction with <see cref="IncludeTags"/> and <see cref="IncludePathMatches"/>.
    /// </summary>
    [Description(
        """
        Apply tree-shaking to the OpenApi schema.
        This works in conjunction with includeTags and includePathMatches.
        """
    )]
    public bool TrimUnusedSchema { get; set; }

    /// <summary>
    /// Array of regular expressions that determine if a schema needs to be kept.
    /// This works in conjunction with <see cref="TrimUnusedSchema"/>.
    /// </summary>
    [Description(
        """
        Array of regular expressions that determine if a schema needs to be kept.
        This works in conjunction with TrimUnusedSchema.
        """
    )]
    public string[] KeepSchemaPatterns { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Set to <c>true</c> to keep all possible type-instances of inheritance/union types.
    /// If this is <c>false</c> only directly referenced types will be kept.
    /// This works in conjunction with <see cref="TrimUnusedSchema"/>.
    /// </summary>
    [Description(
        """
        Keep all possible type-instances of inheritance/union types.
        If this is false only directly referenced types will be kept.
        This works in conjunction with TrimUnusedSchema.
        """
    )]
    public bool IncludeInheritanceHierarchy { get; set; }

    /// <summary>
    /// The NSwag IOperationNameGenerator implementation to use
    /// </summary>
    [Description("The NSwag IOperationNameGenerator implementation to use.")]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public OperationNameGeneratorTypes OperationNameGenerator { get; set; }

    /// <summary>
    /// Set to <c>false</c> to skip default additional properties. Default is <c>true</c>
    /// </summary>
    [Description("Skip default additional properties. Default is true.")]
    public bool GenerateDefaultAdditionalProperties { get; set; } = true;

    /// <summary>
    /// Set to <c>true</c> to generate contracts as immutable records instead of classes
    /// </summary>
    [Description("Generate contracts as immutable records instead of classes.")]
    public bool ImmutableRecords { get; set; }

    /// <summary>
    /// Get ot set the settings describing how to configure Apizr
    /// </summary>
    [Description("The settings describing how to configure Apizr.")]
    public ApizrSettings? ApizrSettings { get; set; }

    /// <summary>
    /// Set to <c>true</c> to wrap multiple query parameters into a single complex one. Default is <c>false</c> (no wrapping).
    /// See https://github.com/reactiveui/refit?tab=readme-ov-file#dynamic-querystring-parameters for more information.
    /// </summary>
    [Description(
        """
        Wrap multiple query parameters into a single complex one.
        See https://github.com/reactiveui/refit?tab=readme-ov-file#dynamic-querystring-parameters for more information.
        """
    )]
    public bool UseDynamicQuerystringParameters { get; set; }

    /// <summary>
    /// Set to <c>true</c> to generate multiple files. Default is <c>false</c>
    /// This is automatically set to <c>true</c> when <see cref="ContractsOutputFolder"/> is specified
    /// Refit interface(s) are written to a file called RefitInterfaces.cs
    /// Contracts are written to a file called Contracts.cs
    /// Dependency Injection is written to a file called DependencyInjection.cs
    /// </summary>
    [Description(
        """
        Generate multiple files. Default is false.
        This is automatically set to true when ContractsOutputFolder is specified
        Refit interface(s) are written to a file called RefitInterfaces.cs
        Contracts are written to a file called Contracts.cs
        Dependency Injection is written to a file called DependencyInjection.cs
        """
    )]
    public bool GenerateMultipleFiles { get; set; }

    /// <summary>
    /// Set to <c>true</c> to use System.Text.Json polymorphic serialization. Default is <c>false</c>
    /// Gets a value indicating whether to use System.Text.Json polymorphic serialization
    /// Replaces NSwag JsonInheritanceConverter attributes with System.Text.Json JsonPolymorphicAttributes.
    /// To have the native support of inheritance (de)serialization and fallback to base types when
    /// payloads with (yet) unknown types are offered by newer versions of an API
    /// See https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/polymorphism for more information
    /// </summary>
    [Description(
        """
        Use System.Text.Json polymorphic serialization. Default is false.
        Replace NSwag JsonInheritanceConverter attributes with System.Text.Json JsonPolymorphicAttributes.
        To have the native support of inheritance (de)serialization and fallback to base types when
        payloads with (yet) unknown types are offered by newer versions of an API
        See https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/polymorphism for more information
        """
    )]
    public bool UsePolymorphicSerialization { get; set; }

    [JsonIgnore] public IParameterNameGenerator? ParameterNameGenerator { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether to generate Security Schema Authentication headers.
    /// </summary>
    [Description("Generate Security Schema Authentication headers")]
    public bool GenerateAuthenticationHeader { get; set; }

    /// <summary>
    /// Gets or sets the collection format to use for array query parameters.
    /// Default is CollectionFormat.Multi.
    /// </summary>
    [Description("The collection format to use for array query parameters. Default is CollectionFormat.Multi.")]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public CollectionFormat CollectionFormat { get; set; } = CollectionFormat.Multi;
}
